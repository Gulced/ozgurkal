import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../widgets/bottom_nav_bar.dart';
import 'activity_tracker_screen.dart';
import 'help_support_screen.dart';
import 'settings_screen.dart';
import 'login_screen.dart';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  Map<String, dynamic>? _userData;
  bool _isLoading = true;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _checkAuthState();
  }

  /// ğŸ”¥ KullanÄ±cÄ±nÄ±n giriÅŸ yapÄ±p yapmadÄ±ÄŸÄ±nÄ± kontrol eder.
  void _checkAuthState() {
    final user = _auth.currentUser;
    if (user == null) {
      _redirectToLogin();
    } else {
      _fetchUserData();
    }
  }

  /// ğŸ”¥ Firestore'dan kullanÄ±cÄ± verilerini Ã§eker.
  Future<void> _fetchUserData() async {
    final user = _auth.currentUser;
    if (user == null) return _redirectToLogin();

    try {
      DocumentSnapshot userDoc = await FirebaseFirestore.instance
          .collection('profiles')
          .doc(user.uid)
          .get();

      if (userDoc.exists && mounted) {
        setState(() {
          _userData = userDoc.data() as Map<String, dynamic>?;
          _isLoading = false;
        });
      } else if (mounted) {
        setState(() {
          _errorMessage = "KullanÄ±cÄ± verisi bulunamadÄ±!";
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _errorMessage = "Veri alÄ±nÄ±rken hata oluÅŸtu: $e";
          _isLoading = false;
        });
      }
    }
  }

  /// ğŸ”¥ KullanÄ±cÄ±yÄ± LoginScreen'e yÃ¶nlendirir.
  void _redirectToLogin() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => LoginScreen()),
      );
    });
  }

  /// ğŸ”¥ KullanÄ±cÄ± Ã§Ä±kÄ±ÅŸ yaptÄ±ÄŸÄ±nda LoginScreen'e yÃ¶nlendirir.
  void _logout() async {
    await _auth.signOut();
    _redirectToLogin();
  }

  /// ğŸ”„ Navigasyon deÄŸiÅŸtirildiÄŸinde gÃ¼ncellenen fonksiyon
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Ã–zgÃ¼r Kal'),
        backgroundColor: Colors.orange,
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: _logout,
          )
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator()) // YÃ¼kleme ekranÄ±
          : _errorMessage != null
          ? Center(child: Text(_errorMessage!, style: const TextStyle(color: Colors.red, fontSize: 16)))
          : _buildHomeScreen(), // Ana ekranÄ± burada oluÅŸturuyoruz
      bottomNavigationBar: BottomNavBar(
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
      ),
    );
  }

  /// ğŸ“Œ Ana sayfa iÃ§eriÄŸi
  Widget _buildHomeScreen() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "BaÄŸÄ±mlÄ±lÄ±k Profiliniz",
            style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          _userData == null
              ? const Text("KullanÄ±cÄ± verileri yÃ¼kleniyor...")
              : Card(
            color: Colors.orange.shade100,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text("Ä°sim: ${_userData?['name'] ?? 'Bilinmiyor'}",
                      style: const TextStyle(fontSize: 18)),
                  Text("BaÄŸÄ±mlÄ±lÄ±k TÃ¼rÃ¼: ${_userData?['dependencyTypes']?.join(', ') ?? 'BelirtilmemiÅŸ'}",
                      style: const TextStyle(fontSize: 18)),
                  Text("AyÄ±klÄ±k SÃ¼resi: ${_userData?['sobrietyDays'] ?? 'Bilinmiyor'} gÃ¼n",
                      style: const TextStyle(fontSize: 18)),
                ],
              ),
            ),
          ),
          const SizedBox(height: 20),
          const Text(
            "GÃ¼nlÃ¼k Takip ve Aktivite PlanÄ±",
            style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          _buildActivityTracker(),
        ],
      ),
    );
  }

  /// ğŸ“Œ GÃ¼nlÃ¼k takip ve aktivite planÄ± bÃ¶lÃ¼mÃ¼
  Widget _buildActivityTracker() {
    return Column(
      children: [
        ListTile(
          leading: const Icon(Icons.fitness_center, color: Colors.orange),
          title: const Text("GÃ¼nlÃ¼k Egzersiz"),
          subtitle: const Text("BugÃ¼n iÃ§in planlanan egzersizlerinizi yapÄ±n."),
          trailing: ElevatedButton(
            onPressed: () {
              Navigator.push(context, MaterialPageRoute(builder: (context) => ActivityTrackerScreen()));
            },
            child: const Text("Takip Et"),
          ),
        ),
        ListTile(
          leading: const Icon(Icons.check_circle, color: Colors.green),
          title: const Text("GÃ¼nlÃ¼k Hedefler"),
          subtitle: const Text("BugÃ¼n tamamlamanÄ±z gereken gÃ¶revler."),
          trailing: ElevatedButton(
            onPressed: () {
              // GÃ¼nlÃ¼k gÃ¶rev takibi ekranÄ±na yÃ¶nlendirme yapÄ±labilir
            },
            child: const Text("Planla"),
          ),
        ),
      ],
    );
  }
}
